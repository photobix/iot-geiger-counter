esphome:
  name: geigercounter

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "5a058758b9167cdba76c355859c3c303"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geigercounter Fallback Hotspot"
    password: "euGJEjJRtEO6"

captive_portal:

i2c:
  sda: D2
  scl: D1

font:
  - file: "Oswald-Light.ttf"
    id: font_40
    size: 40
  - file: "Oswald-Light.ttf"
    id: font_30
    size: 30
  - file: "Oswald-Light.ttf"
    id: font_25
    size: 25
  - file: "Oswald-Light.ttf"
    id: font_20
    size: 20
  - file: "Oswald-Light.ttf"
    id: font_14
    size: 14
  - file: "Oswald-Light.ttf"
    id: font_10
    size: 10

sensor:
  - platform: pulse_counter
    pin: D4
    id: "geiger_counter"
    name: "Geiger Counter"
    unit_of_measurement: 'CPM'
    on_raw_value:
      - sensor.template.publish:
          id: radiation_level
          state: !lambda 'return x / 153.8;'
  - platform: template
    id: "radiation_level"
    name: "Radiation Level"
    unit_of_measurement: 'µSv/h'
    icon: mdi:radioactive
    accuracy_decimals: 5
    
binary_sensor:
  - platform: template
    device_class: safety
    id: radiation_warning
    name: "Radiation Warning"
    lambda: |-
      if (id(geiger_counter).state > 100) {
        // High Count.
        return true;
      } else {
        // Normal Count.
        return false;
      }

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    rotation: 180
    address: 0x3C
    update_interval: 2s
    lambda: |-

      it.printf(0,0,id(font_14),"CPM: %.3f",id(geiger_counter).state);
      it.printf(0,20,id(font_14),"Status: %s",id(radiation_warning).state ? "DANGER" : "SAFE");
      it.printf(0,40,id(font_14),"%.5f µSv/h",id(radiation_level).state);
